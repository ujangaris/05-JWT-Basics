#Section 8: JWT - Basics | 151. Setup
    - starter/ npm install && npm start
    - http://localhost:3000

#Section 8: JWT - Basics | 152. Controllers

    Pengujian pada Postman
        Dashboard:
        GET {{URL}}/dashboard
            response:   
                        {
                            "msg": "Hello, John Doe",
                            "secret": "Here is your authorized data, your lucky number is 54"
                        }

        Login/Register:
        {{URL}}/login
            response: Fake Login/Register/Signup Route   

#Section 8: JWT - Basics | 154. Validate Username and Password
    Pengujian pada Postman
        Login/Register:
        {{URL}}/login
        body->raw -> json:
            {
                "username": "john","password":"secret"
            }
        response: Fake Login/Register/Signup Route  
        dan pada     
            terminal : john secret

    Pengujian pada Postman
        Login/Register:
        {{URL}}/login
        body->raw -> json:
            {
                "username": "","password":""
            }
        ketika username dan password dikosongkan response akan menampilkan pesan error: 
            {
                "msg": "Please provide email and password"
            }

#Section 8: JWT - Basics | 155. JWT - Overview

#Section 8: JWT - Basics | 156. JWT - Structure
    Documentation: https://jwt.io/introduction

    Documentation: https://www.npmjs.com/package/jsonwebtoken

#Section 8: JWT - Basics | 158. Sign JWT
    Pengujian pada Postman
        Login/Register:
        {{URL}}/login
        body->raw -> json:
            {
                "username": "john","password":"secret"
            }
    response:
            {
                "msg": "user created",
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTksInVzZXJuYW1lIjoiam9obiIsImlhdCI6MTYzNzI2NzMxMSwiZXhwIjoxNjM5ODU5MzExfQ.yXbJ59YgdNuDg-yS1xiSZqS-mOsfn1I7fMKLjG2crxQ"
            }
    copy paste token pada jwt encode:
        Documentation: https://jwt.io  maka response data akan tampil:
            {
                "id": 19,
                "username": "john",
                "iat": 1637267311,
                "exp": 1639859311
            }

#Section 8: JWT - Basics | 159. Bearer Token - Overview
    Documentation: https://jwt.io/introduction

#Section 8: JWT - Basics | 160. Send Bearer Token
    Pengujian pada Postman
        Login/Register:
        {{URL}}/login
        body->raw -> json:
            {
                "username": "john","password":"secret"
            }
    response:
            {
                "msg": "user created",
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTksInVzZXJuYW1lIjoiam9obiIsImlhdCI6MTYzNzI2NzMxMSwiZXhwIjoxNjM5ODU5MzExfQ.yXbJ59YgdNuDg-yS1xiSZqS-mOsfn1I7fMKLjG2crxQ"
            }
    copy paste token pada jwt encode:
         {{URL}}/dashboard
         header => Authorization : Bearer paste token, lalu coba send data.

         response:
            {
                "msg": "Hello, John Doe",
                "secret": "Here is your authorized data, your lucky number is 94"
            }

#Section 8: JWT - Basics | 161. Check Auth Header
    Pengujian pada Postman
        Login/Register:
        {{URL}}/login
        body->raw -> json:
            {
                "username": "john","password":"secret"
            }
        pada header matikan Authorization, maka responsenya:
            {
                "msg": "No token provided"
            }
        lalu pada terminal akan hanya ada token yang tergenerate

#Section 8: JWT - Basics | 162. Verif Token
    Pengujian pada Postman
        Login/Register:
        {{URL}}/login
        body->raw -> json:
            {
                "username": "peter","password":"secret"
            }
    response:
            {
                "msg": "user created",
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTksInVzZXJuYW1lIjoiam9obiIsImlhdCI6MTYzNzI2NzMxMSwiZXhwIjoxNjM5ODU5MzExfQ.yXbJ59YgdNuDg-yS1xiSZqS-mOsfn1I7fMKLjG2crxQ"
            }
    copy paste token pada jwt encode:
         {{URL}}/dashboard
         header => Authorization : Bearer paste token, lalu coba send data.

         response:
            {
                "msg": "Hello, peter",
                "secret": "Here is your authorized data, your lucky number is 94"
            }

        pengujian pada browser:
        http://localhost:3000
            untuk mengetahui konsept api yang kita buat kamu dapat login pada browser
            dengan manginputkan username dan password sembarang, guna medapatkan token dan data user yang login .

#Section 8: JWT - Basics | 163. Auth Middleware Setup
        pengujian pada browser:
        http://localhost:3000
            untuk mengetahui konsept api yang kita buat kamu dapat login pada browser
           coba klik get data, maka akan muncul pesan "Not authorized to access this route",
           dan pada terminal akan muncul 'Bearer null'

#Section 8: JWT - Basics | 164. Auth Middleware Complete
    Pengujian pada Postman
        Login/Register:
        {{URL}}/login
        body->raw -> json:
            {
                "username": "peter","password":"secret"
            }
    response:
            {
                "msg": "user created",
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTksInVzZXJuYW1lIjoiam9obiIsImlhdCI6MTYzNzI2NzMxMSwiZXhwIjoxNjM5ODU5MzExfQ.yXbJ59YgdNuDg-yS1xiSZqS-mOsfn1I7fMKLjG2crxQ"
            }
    copy paste token pada jwt encode:
         {{URL}}/dashboard
         header => Authorization : Bearer paste token, lalu coba send data.

         response:
            {
                "msg": "Hello, peter",
                "secret": "Here is your authorized data, your lucky number is 94"
            }

        pengujian pada browser:
        http://localhost:3000
            untuk mengetahui konsept api yang kita buat kamu dapat login pada browser
            dengan manginputkan username dan password diatas, guna medapatkan token dan data user yang login .
        
        pada terminal menampilkan response: { id: 19, username: 'peter' }